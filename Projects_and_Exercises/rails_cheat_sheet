Creating a new rails project
    - rails new blog

Move inside newly created rails project
    - cd blog

Starting rails server
    - rails server
        (Will start server at http://localhost:3000)

Create resources in routes.rb
    - resources :articles
 
Check REST routes generated for new resources
    - rails routes

Try any of the routes generated by routes in browser
    - http://localhost:3000/articles/new
        (It will say no controller with name 'articles' found)

Create a controller using rails generator
    - rails generate controller Articles
        (Will generate a file called  articles_controller.rb inside controller folder)

Try refresh the url (http://localhost:3000/articles/new)
    (says action new is missing in articles controller file)

Create an action/method inside aricles controller
    def new
    end

Try refresh the page now
    It will say it is missing a template/view file.

Create a file called new.html.erb inside app/views/articles/ with name new.html.erb


Add some basic html tag inside erb file and refresh page now


Create a form with bellow code

<%= form_with scope: :article, url: articles_path, local: true do |form| %>
  <p>
    <%= form.label :title %><br>
    <%= form.text_field :title %>
  </p>
 
  <p>
    <%= form.label :text %><br>
    <%= form.text_area :text %>
  </p>
 
  <p>
    <%= form.submit %>
  </p>
<% end %>


Refresh page and check the form and check form page source code


Try adding content and submitting content
    It will throw an error of creat action not found

Create an action/method inside articles controller
    def create
    end

If you submit form now, NOTHING is happenning.


Render submitted params inside create action
render plain: params[:article].inspect


To save our data in database we need a database and table


Create a model for storing form data in database
    rails generate model Article title:string text:text


Open newly created migration file inside db folder and check content


Run migration to create a database and column in local system
    rails db:migrate

A database file is created with database specified in database.yml
    How to check Database
       open sqlite3 database 
        - sqlite3 development.sqlite3
       list tables
        - .tables
       check table schema
        - .schema articles
        
Write saving form content to database inside create action
    @article = Article.new(params[:article])
    
    @article.save
    redirect_to @article


Allow parameters safely to write to database with a private method
    private
    def article_params
        params.require(:article).permit(:title, :text)
    end
    
    and change articlee_params inside create action

Create an action names show to show blog content
def show
    @article = Article.find(params[:id])
end


Write some basic HTML to show saved content
    <p>
        <strong>Title:</strong>
        <%= @article.title %>
    </p>
 
    <p>
        <strong>Text:</strong>
        <%= @article.text %>
    </p>


Write a function to show all the blogs entered in index action
def index
    @articles = Article.all
end

Create a view/html page for index action
<h1>Listing articles</h1>
 
<table>
  <tr>
    <th>Title</th>
    <th>Text</th>
  </tr>
 
  <% @articles.each do |article| %>
    <tr>
      <td><%= article.title %></td>
      <td><%= article.text %></td>
      <td><%= link_to 'Show', article_path(article) %></td>
    </tr>
  <% end %>
</table>



Now we need some place where we can provide links to our blog posts
    inside welcome controllers index action put a link to our blogs
    <%= link_to 'My Blog', controller: 'articles' %>



At listing blogs put a link to create new blog 
    on top of table tag in index.html.erb insert
    <%= link_to 'New article', new_article_path %>



Add a link to go back to show action after creating a blog post 
    in new.html.erb insert a link to go back to index page


Add a link to go back to list of blogs add a link to show.html.erb at bottom
    <%= link_to 'Back', articles_path %>




Add validation in article model
    validates :title, presence: true, length: { minimum: 5 }
    THis will prevent user entering blog without text and enforces title to be atleast 5 char length




Now after validation we can decide if user didn't enter any title or less than 5 char dont save 
    change create action's save statement with bellow
    if @article.save
        redirect_to @article
    else
        render 'new'
    end

    and add bellow code to new action
    @article = Article.new

 


A nice error message for validation fail?

put bellow code to add failed validation messages while creating new blogs (new.html.erb)
<% if @article.errors.any? %>
    <div id="error_explanation">
      <h2>
        <%= pluralize(@article.errors.count, "error") %> prohibited
        this article from being saved:
      </h2>
      <ul>
        <% @article.errors.full_messages.each do |msg| %>
          <li><%= msg %></li>
        <% end %>
      </ul>
    </div>
  <% end %>


CR Done now



U

Create and edit action and put bellow code
def edit
  @article = Article.find(params[:id])
end
 

Create associated view and put bellow code
<h1>Edit article</h1>
 
<%= form_with(model: @article) do |form| %>
 
  <% if @article.errors.any? %>
    <div id="error_explanation">
      <h2>
        <%= pluralize(@article.errors.count, "error") %> prohibited
        this article from being saved:
      </h2>
      <ul>
        <% @article.errors.full_messages.each do |msg| %>
          <li><%= msg %></li>
        <% end %>
      </ul>
    </div>
  <% end %>
 
  <p>
    <%= form.label :title %><br>
    <%= form.text_field :title %>
  </p>
 
  <p>
    <%= form.label :text %><br>
    <%= form.text_area :text %>
  </p>
 
  <p>
    <%= form.submit %>
  </p>
 
<% end %>
 
<%= link_to 'Back', articles_path %>


ABOVE IS HTTP METHOD PATCH


Create update action to update edited data to record
def update
        @article = Article.find(params[:id])
       
        if @article.update(article_params)
          redirect_to @article
        else
          render 'edit'
        end
    end




Add a link in index page to edit option
<td><%= link_to 'Edit', edit_article_path(article) %></td>


ind show page also
<%= link_to 'Edit', edit_article_path(@article) %> |



But code is duplicated now for forms!!!
Use partials to cleanup our code


Create a new file app/views/articles/_form.html.erb with the following content:

<%= form_with model: @article, local: true do |form| %>
 
  <% if @article.errors.any? %>
    <div id="error_explanation">
      <h2>
        <%= pluralize(@article.errors.count, "error") %> prohibited
        this article from being saved:
      </h2>
      <ul>
        <% @article.errors.full_messages.each do |msg| %>
          <li><%= msg %></li>
        <% end %>
      </ul>
    </div>
  <% end %>
 
  <p>
    <%= form.label :title %><br>
    <%= form.text_field :title %>
  </p>
 
  <p>
    <%= form.label :text %><br>
    <%= form.text_area :text %>
  </p>
 
  <p>
    <%= form.submit %>
  </p>
 
<% end %>




In both new.html.erb and edit.html.erb replace form with bellow
<%= render 'form' %>





D

Deleting articles
Write a method called destroy in articles controller as bellow
def destroy
  @article = Article.find(params[:id])
  @article.destroy
 
  redirect_to articles_path
end



Add a delete link in index.html and pass id of the article as bellow
<td><%= link_to 'Destroy', article_path(article),
              method: :delete,
              data: { confirm: 'Are you sure?' } %></td>














